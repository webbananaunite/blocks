{\rtf1\ansi\ansicpg932\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;}
{\colortbl;\red255\green255\blue255;\red9\green66\blue127;\red244\green244\blue244;\red68\green104\blue13;
\red35\green38\blue42;\red166\green65\blue5;\red82\green91\blue100;}
{\*\expandedcolortbl;;\cssrgb\c392\c33725\c57255;\cssrgb\c96471\c96471\c96471;\cssrgb\c32941\c47451\c5098;
\cssrgb\c18431\c20000\c21569;\cssrgb\c71765\c33333\c392;\cssrgb\c39608\c43137\c46667;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12480\viewh9600\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include \cf4 <resolv.h>\cf5 \
\
\cf2 static\cf5  \cf6 NSArray\cf5  *fetchTXTRecords(\cf6 NSString\cf5  *domain)\
\{\
    \cf7 // declare buffers / return array\cf5 \
    \cf6 NSMutableArray\cf5  *answers = [\cf6 NSMutableArray\cf5  new];\
    u_char answer[\cf6 1024\cf5 ];\
    ns_msg msg;\
    ns_rr rr;\
\
    \cf7 // initialize resolver\cf5 \
    res_init();\
\
    \cf7 // send query. res_query returns the length of the answer, or -1 if the query failed\cf5 \
    \cf2 int\cf5  rlen = res_query([domain cStringUsingEncoding:\cf6 NSUTF8StringEncoding\cf5 ], ns_c_in, ns_t_txt, answer, \cf2 sizeof\cf5 (answer));\
\
    \cf2 if\cf5 (rlen == \cf6 -1\cf5 )\
    \{\
        \cf2 return\cf5  \cf6 nil\cf5 ;\
    \}\
\
    \cf7 // parse the entire message\cf5 \
    \cf2 if\cf5 (ns_initparse(answer, rlen, &msg) < \cf6 0\cf5 )\
    \{\
        \cf2 return\cf5  \cf6 nil\cf5 ;\
    \}\
\
    \cf7 // get the number of messages returned\cf5 \
    \cf2 int\cf5  rrmax = rrmax = ns_msg_count(msg, ns_s_an);\
\
    \cf7 // iterate over each message\cf5 \
    \cf2 for\cf5 (\cf2 int\cf5  i = \cf6 0\cf5 ; i < rrmax; i++)\
    \{\
        \cf7 // parse the answer section of the message\cf5 \
        \cf2 if\cf5 (ns_parserr(&msg, ns_s_an, i, &rr))\
        \{\
            \cf2 return\cf5  \cf6 nil\cf5 ;\
        \}\
\
        \cf7 // obtain the record data\cf5 \
        \cf2 const\cf5  u_char *rd = ns_rr_rdata(rr);\
\
        \cf7 // the first byte is the length of the data\cf5 \
        size_t length = rd[\cf6 0\cf5 ];\
\
        \cf7 // create and save a string from the C string\cf5 \
        \cf6 NSString\cf5  *record = [[\cf6 NSString\cf5  alloc] initWithBytes:(rd + \cf6 1\cf5 ) length:length encoding:\cf6 NSUTF8StringEncoding\cf5 ];\
        [answers addObject:record];\
    \}\
\
    \cf2 return\cf5  answers;\
\}\
}